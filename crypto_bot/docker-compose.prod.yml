version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: crypto_bot_prod
    restart: unless-stopped
    environment:
      - ENV=production
      - DEBUG=false
      - LOG_LEVEL=INFO
      - REAL_TIME_ENABLED=true
      - PERFORMANCE_MONITORING_ENABLED=true
    env_file:
      - .env.prod
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - crypto_network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  postgres:
    image: postgres:15-alpine
    container_name: crypto_bot_postgres_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: crypto_bot_prod
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./scripts/init_prod_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    ports:
      - "5432:5432"
    networks:
      - crypto_network
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  redis:
    image: redis:7-alpine
    container_name: crypto_bot_redis_prod
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - redis_prod_data:/data
      - ./scripts/redis.prod.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - crypto_network
    deploy:
      resources:
        limits:
          memory: 1G

  nginx:
    image: nginx:alpine
    container_name: crypto_bot_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - crypto_network
    depends_on:
      - app

volumes:
  postgres_prod_data:
  redis_prod_data:

networks:
  crypto_network:
    driver: bridge
