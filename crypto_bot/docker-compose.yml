version: '3.8'

services:
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: crypto_bot_app
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql+asyncpg://crypto_user:crypto_pass@postgres:5432/crypto_bot
      - REDIS_URL=redis://redis:6379/0
      - REAL_TIME_ENABLED=true
      - PERFORMANCE_MONITORING_ENABLED=true
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./src:/app/src
    networks:
      - crypto_network
    healthcheck:
      test: ["CMD", "python", "-c", "import asyncio; import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: crypto_bot_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: crypto_bot
      POSTGRES_USER: crypto_user
      POSTGRES_PASSWORD: crypto_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    ports:
      - "5432:5432"
    networks:
      - crypto_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crypto_user -d crypto_bot"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: crypto_bot_redis
    restart: unless-stopped
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru --save 60 1000
    volumes:
      - redis_data:/data
      - ./scripts/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - crypto_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # ðŸ”¥ Monitoring service for real-time performance
  monitoring:
    image: grafana/grafana:latest
    container_name: crypto_bot_monitoring
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - crypto_network
    depends_on:
      - app

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  grafana_data:
    driver: local

networks:
  crypto_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
