#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –í–°–ï–• –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ –∫—Ä–∏–ø—Ç–æ-–±–æ—Ç–∞.
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –≤–∏–¥—ã –∏–º–ø–æ—Ä—Ç–æ–≤ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º src.
"""

import os
import re
from pathlib import Path

# –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º
SRC_DIR = Path("./src")

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∑–∞–º–µ–Ω—ã
IMPORT_PATTERNS = [
    # from X import Y –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    (r'^from config\.', 'from src.config.'),
    (r'^from data\.', 'from src.data.'),
    (r'^from services\.', 'from src.services.'),
    (r'^from utils\.', 'from src.utils.'),
    (r'^from bot\.', 'from src.bot.'),

    # import X –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    (r'^import config\.', 'import src.config.'),
    (r'^import data\.', 'import src.data.'),
    (r'^import services\.', 'import src.services.'),
    (r'^import utils\.', 'import src.utils.'),
    (r'^import bot\.', 'import src.bot.'),

    # from X.Y import Z –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ)
    (r'^from data\.models import', 'from src.data.models import'),
    (r'^from data\.repositories import', 'from src.data.repositories import'),
    (r'^from services\.websocket import', 'from src.services.websocket import'),
    (r'^from services\.indicators import', 'from src.services.indicators import'),
    (r'^from services\.signals import', 'from src.services.signals import'),
    (r'^from services\.notifications import', 'from src.services.notifications import'),
    (r'^from services\.cache import', 'from src.services.cache import'),
    (r'^from services\.real_time import', 'from src.services.real_time import'),
    (r'^from bot\.handlers import', 'from src.bot.handlers import'),
    (r'^from bot\.keyboards import', 'from src.bot.keyboards import'),
    (r'^from bot\.middlewares import', 'from src.bot.middlewares import'),
]


def fix_imports_in_file(filepath: Path) -> tuple[bool, list[str]]:
    """
    –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–±—ã–ª–æ_–ª–∏_–∏–∑–º–µ–Ω–µ–Ω–∏–µ, —Å–ø–∏—Å–æ–∫_–∏–∑–º–µ–Ω–µ–Ω–∏–π)
    """
    changes = []

    try:
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        with open(filepath, 'r', encoding='utf-8') as f:
            lines = f.readlines()

        modified = False
        new_lines = []

        for line_num, line in enumerate(lines, 1):
            original_line = line

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–º–µ–Ω—ã –∫ —Å—Ç—Ä–æ–∫–µ
            for pattern, replacement in IMPORT_PATTERNS:
                if re.match(pattern, line.strip()):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Å—Ç—É–ø—ã
                    indent = len(line) - len(line.lstrip())
                    new_line = ' ' * indent + re.sub(pattern, replacement, line.strip()) + '\n'

                    if new_line != original_line:
                        line = new_line
                        modified = True
                        changes.append(f"  –°—Ç—Ä–æ–∫–∞ {line_num}: {original_line.strip()} ‚Üí {new_line.strip()}")

            new_lines.append(line)

        # –ï—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        if modified:
            with open(filepath, 'w', encoding='utf-8') as f:
                f.writelines(new_lines)

        return modified, changes

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {filepath}: {e}")
        return False, []


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üîß –ù–∞—á–∏–Ω–∞—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –í–°–ï–• –∏–º–ø–æ—Ä—Ç–æ–≤...")
    print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {SRC_DIR.absolute()}")
    print("=" * 60)

    fixed_count = 0
    total_count = 0
    all_changes = []

    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º –≤—Å–µ Python —Ñ–∞–π–ª—ã
    for py_file in SRC_DIR.rglob("*.py"):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º __pycache__
        if "__pycache__" in str(py_file):
            continue

        total_count += 1

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
        was_fixed, changes = fix_imports_in_file(py_file)

        if was_fixed:
            rel_path = py_file.relative_to(SRC_DIR)
            print(f"\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: {rel_path}")
            for change in changes:
                print(change)
            fixed_count += 1
            all_changes.extend(changes)

    print("\n" + "=" * 60)
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_count}")
    print(f"‚úèÔ∏è  –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {fixed_count}")
    print(f"üìù –í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {len(all_changes)}")
    print(f"‚ú® –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {total_count - fixed_count}")

    if fixed_count > 0:
        print("\n‚úÖ –ò–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        print("üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å Docker Compose")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
        print("\nüìå –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("   docker-compose down")
        print("   docker-compose build --no-cache")
        print("   docker-compose up -d")
        print("   docker-compose logs -f app")
    else:
        print("\n‚ú® –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")


if __name__ == "__main__":
    main()